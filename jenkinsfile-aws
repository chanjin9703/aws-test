pipeline {
    agent any

    environment {
        GITNAME = 'ks3ppp'            
        GITEMAIL = 'ks3ppp@gmail.com' 
        GITWEBADD = 'https://github.com/chanjin9703/aws-test.git'
        GITSSHADD = 'git@github.com:chanjin9703/aws-test.git'
        GITCREDENTIAL = 'git_cre'
        
        IMAGE_NAME = 'ecspipe-image'
        ECR_CREDENTIALS = 'ecr_cre' // Jenkins Credential에서 설정한 ECR 액세스 키와 시크릿 키
        ECR_REGISTRY = '816040392320.dkr.ecr.us-east-1.amazonaws.com'
        REGION = 'us-east-1'
    }


    stages {
    
        stage('Checkout Github') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [],
                userRemoteConfigs: [[credentialsId: GITCREDENTIAL, url: GITWEBADD]]])
            }
        
        
            post {
        
                failure {
                    echo 'Repository clone failure'
                }
                success {
                    echo 'Repository clone success'
                }
            }
        }
        
        stage('dockerizing project by dockerfile') {
            steps {
                sh '''
        		 docker build -t $IMAGE_NAME:$BUILD_NUMBER .
        		 docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:latest

        		 '''
            }
            post {
                success {
                    echo 'success dockerizing project'
                }
                failure {
                    error 'fail dockerizing project' // exit pipeline
                }
            }
        }
       
        stage('upload aws ECR') {
            steps {
                script{
                    // cleanup current user docker credentials
                    sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'
                    
                   
                    docker.withRegistry("https://${ECR_REGISTRY}", "${ECR_CREDENTIALS}") {
                      docker.image("${IMAGE_NAME}:${BUILD_NUMBER}").push()
                      docker.image("${IMAGE_NAME}:latest").push()
                    }

                }
            }
            post {
                success {
                    echo 'success upload image'
                }
                failure {
                    error 'fail upload image' // exit pipeline
                }
            }
        }
       
        
    }
}